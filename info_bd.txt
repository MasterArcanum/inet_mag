-- Безопасное удаление роли, если она существует, с отозванием прав
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_catalog.pg_roles WHERE rolname = 'myshop_user') THEN
    DROP OWNED BY myshop_user;
    DROP ROLE myshop_user;
  END IF;
END $$;

DROP TABLE IF EXISTS messages;
DROP TABLE IF EXISTS order_items;
DROP TABLE IF EXISTS orders;
DROP TABLE IF EXISTS product_files;
DROP TABLE IF EXISTS products;
DROP TABLE IF EXISTS categories;
DROP TABLE IF EXISTS users;

-- Таблица пользователей с дополнительными полями для личного кабинета,
-- включая разделение адреса доставки на отдельные компоненты.
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(80) UNIQUE NOT NULL,
    email VARCHAR(120) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    is_admin BOOLEAN NOT NULL DEFAULT FALSE,
    full_name VARCHAR(150),
    phone VARCHAR(20),
    birth_date DATE,
    city VARCHAR(100),
    street VARCHAR(255),
    house VARCHAR(50),
    apartment VARCHAR(50),
    private_house BOOLEAN NOT NULL DEFAULT FALSE
);

INSERT INTO users (username, email, password_hash, is_admin)
VALUES ('admin', 'admin@example.com', 'admin_password_hash', TRUE);

-- Таблица категорий товаров
CREATE TABLE categories (
    id SERIAL PRIMARY KEY,
    name VARCHAR(80) UNIQUE NOT NULL,
    description TEXT
);

-- Таблица товаров
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(150) NOT NULL,
    description TEXT,
    price NUMERIC(10, 2) NOT NULL,
    stock INTEGER DEFAULT 0,
    category_id INTEGER NOT NULL,
    CONSTRAINT fk_category
        FOREIGN KEY (category_id)
        REFERENCES categories(id)
);

-- Таблица заказов
CREATE TABLE orders (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    order_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(50) NOT NULL DEFAULT 'pending',
    CONSTRAINT fk_user
        FOREIGN KEY (user_id)
        REFERENCES users(id)
);

-- Таблица элементов заказа
CREATE TABLE order_items (
    id SERIAL PRIMARY KEY,
    order_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL DEFAULT 1,
    CONSTRAINT fk_order
        FOREIGN KEY (order_id)
        REFERENCES orders(id),
    CONSTRAINT fk_product
        FOREIGN KEY (product_id)
        REFERENCES products(id)
);

-- Таблица для хранения файлов (изображений и документов) в формате base64
CREATE TABLE product_files (
    id SERIAL PRIMARY KEY,
    product_id INTEGER NOT NULL,
    file_name VARCHAR(255) NOT NULL,
    file_type VARCHAR(50) NOT NULL,
    data_base64 TEXT NOT NULL,
    upload_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_product_file
        FOREIGN KEY (product_id)
        REFERENCES products(id)
);

-- Таблица сообщений (например, для обратной связи)
CREATE TABLE messages (
    id SERIAL PRIMARY KEY,
    user_id INTEGER,
    subject VARCHAR(150),
    message TEXT NOT NULL,
    sent_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    answered BOOLEAN NOT NULL DEFAULT FALSE,
    answer TEXT,
    answered_at TIMESTAMP,
    CONSTRAINT fk_message_user
        FOREIGN KEY (user_id)
        REFERENCES users(id)
);


-- Создаем роль myshop_user с возможностью подключения (LOGIN)
CREATE ROLE myshop_user WITH LOGIN PASSWORD '1234';

-- Предоставляем роли myshop_user все права на базу данных internet_shop_bd
GRANT ALL PRIVILEGES ON DATABASE internet_shop_bd TO myshop_user;

-- Предоставляем права на все таблицы и последовательности в схеме public
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO myshop_user;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO myshop_user;
